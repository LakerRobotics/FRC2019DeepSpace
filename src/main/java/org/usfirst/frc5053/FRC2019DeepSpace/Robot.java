// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5053.FRC2019DeepSpace;

import edu.wpi.cscore.UsbCamera;
import edu.wpi.cscore.VideoSink;
import edu.wpi.first.cameraserver.CameraServer;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import javax.naming.InitialContext;

import org.usfirst.frc5053.FRC2019DeepSpace.commands.*;
import org.usfirst.frc5053.FRC2019DeepSpace.subsystems.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in 
 * the project.
 */
public class Robot extends TimedRobot {

    Command autonomousCommand;
    SendableChooser<Command> chooser = new SendableChooser<>();

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static driveTrain driveTrain;
    public static shoulderLift shoulderLift;
    public static wristRotation wristRotation;
    public static intake intake;
    public static claw claw;
    public static distanceControl distanceControl;
    public static labViewSubsystem labViewSubsystem;
    public static climber climber;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    VideoSink server;
    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    @Override
    public void robotInit() {
        /*********************
         * 20190216 : Scott Andrews
         * Allow video to be streamed from camera attached to the RoboRIO USB port
         */
        CameraServer.getInstance().startAutomaticCapture(); 
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrain = new driveTrain();
        shoulderLift = new shoulderLift();
        wristRotation = new wristRotation();
        intake = new intake();
        claw = new claw();
        distanceControl = new distanceControl();
        labViewSubsystem = new labViewSubsystem();
        climber = new climber();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        System.out.println("OI");
        oi = new OI();

        // Add commands to Autonomous Sendable Chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        chooser.setDefaultOption("Autonomous Command", new AutonomousCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        SmartDashboard.putData("Auto mode", chooser);
        System.out.println("robotinit");

}

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    @Override
    public void disabledInit(){
        // Suggested by Prateek_M Team 5190 Programming Lead
        // to prevent the shoulder and wrist from moving when 
        // enable is pressed.
        shoulderLift.stopShoulder();
        wristRotation.stopWrist();
        Scheduler.getInstance().removeAll();  // DO WE WANT TO DO THIS?
    }

    @Override
    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void autonomousInit() {
        Robot.intake.lowerIntake(); 
        // autonomousCommand = chooser.getSelected();
        // schedule the autonomous command (example)
        // if (autonomousCommand != null) autonomousCommand.start();
        teleopInit();   // According to multiple posts on ChiefDelphi, this should work during sandstorm 2019
    }

    /**
     * This function is called periodically during autonomous
     */
    @Override
    public void autonomousPeriodic() {
        // Scheduler.getInstance().run();
        teleopPeriodic();   // According to multiple posts on ChiefDelphi, this should work during sandstorm 2019
    }

    @Override
    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();

        // Make sure that the encoder values are in-sync everytime we enable
        shoulderLift.syncEncoderValues();
        wristRotation.syncEncoders();

    }

    /**
     * This function is called periodically during operator control
     */
    @Override
    public void teleopPeriodic() {
     

        Scheduler.getInstance().run();
    }
}
