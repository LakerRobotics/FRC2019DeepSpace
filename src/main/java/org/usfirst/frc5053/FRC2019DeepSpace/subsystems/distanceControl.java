// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5053.FRC2019DeepSpace.subsystems;


import java.util.PrimitiveIterator.OfInt;

import javax.lang.model.util.ElementScanner6;

import org.usfirst.frc5053.FRC2019DeepSpace.OI;
import org.usfirst.frc5053.FRC2019DeepSpace.Robot;
import org.usfirst.frc5053.FRC2019DeepSpace.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.Ultrasonic;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class distanceControl extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
    private final double ROBOT_SQUARE_ERROR_MARGIN = 4.0;
    private final double TOO_CLOSE_TO_TARGET = 0.5;
    //private final double SHORT_OF_TARGET = -0.5;
    private final double SHORT_OF_TARGET = -2.0;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private Ultrasonic leftUltrasonic;
    private Ultrasonic rightUltrasonic;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public distanceControl() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        leftUltrasonic = new Ultrasonic(4, 5);
        addChild("leftUltrasonic",leftUltrasonic);
        
        
        rightUltrasonic = new Ultrasonic(6, 7);
        addChild("rightUltrasonic",rightUltrasonic);
        
        

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=
        
        leftUltrasonic.setEnabled(true);
        leftUltrasonic.setAutomaticMode(true);

        rightUltrasonic.setEnabled(true);
        rightUltrasonic.setAutomaticMode(true);
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop
        SmartDashboard.putNumber("leftUltrasonic", leftUltrasonic.getRangeInches());
        SmartDashboard.putNumber("rightUltrasonic", rightUltrasonic.getRangeInches());
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    /* LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL */
    /* Use the ultrasonic sensors to determine if the      */
    /* front of the robot is square to the target.         */
    /* LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL */

    public boolean isRobotSquare(){     
        double distanceDifference = Math.abs(leftUltrasonic.getRangeInches() - rightUltrasonic.getRangeInches());
        SmartDashboard.putNumber("SQUARE error:", distanceDifference);
        if (distanceDifference <= ROBOT_SQUARE_ERROR_MARGIN) 
        {
            SmartDashboard.putBoolean("RobotSquare", true);
            return true;
        }
        else 
        {
            SmartDashboard.putBoolean("RobotSquare", false);
            return false;
        }
    }

    /* LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL */
    /* Use the ultrasonic sensors to determine if the      */
    /* robot has reached the targeted distance from the    */
    /* delivery location.                                  */
    /* LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL */

    public boolean hasRobotReachedTarget(){
        // The index into the encoder and distance positions is determined by a 
        // combination of the game piece and delivery position selected
        double rightTarget = Robot.oi.getRightUltrasonicTarget();
        SmartDashboard.putNumber("RightTargetDistance: ", rightTarget);
        double leftTarget = Robot.oi.getLeftUltrasonicTarget();
        SmartDashboard.putNumber("LeftTargetDistance: ", leftTarget);

        if (rightTarget == -1.0 || leftTarget == -1.0)
        {
            return true;
        }
        else
        {
        double rightTargetDifference = rightTarget - rightUltrasonic.getRangeInches();
        SmartDashboard.putNumber("right Target Difference", rightTargetDifference);
        
        double leftTargetDifference = leftTarget - leftUltrasonic.getRangeInches();
        SmartDashboard.putNumber("left Target Difference", leftTargetDifference);

        if (rightTargetDifference >= SHORT_OF_TARGET ||
            leftTargetDifference >= SHORT_OF_TARGET) 
            {
                SmartDashboard.putBoolean("TargetReached", true);
                return true;
            }
        else 
            {
                SmartDashboard.putBoolean("TargetReached", false);
                return false;
            }
        }
       

 

}


