// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5053.FRC2019DeepSpace.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc5053.FRC2019DeepSpace.Robot;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
/**
 *
 */
public class labViewInterface extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public labViewInterface() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.labViewSubsystem);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        /*****************************
         * Act on the function requested by the operator from the LabView customized
         * Dashboard
         *****************************/
        try {
            double inputFromLabViewDashBoard = Robot.oi.INITIAL_AND_ERROR_BUTTON;
            int convertedInputFromLabViewDashBoard = Robot.oi.INITIAL_AND_ERROR_BUTTON;
            Command commandToExecute;

            inputFromLabViewDashBoard = SmartDashboard.getNumber("armHeightEnum", Robot.oi.INITIAL_AND_ERROR_BUTTON);

            convertedInputFromLabViewDashBoard = (int) inputFromLabViewDashBoard;
            if ((convertedInputFromLabViewDashBoard == Robot.oi.lastDashboardButton) ||
                (convertedInputFromLabViewDashBoard == Robot.oi.INITIAL_AND_ERROR_BUTTON) ||
                (convertedInputFromLabViewDashBoard == Robot.oi.UNPROGRAMMED_ARM_PARAMETER ))
                {
                // Do Nothing : The operator has not requested a new operation
                }
            else
                {
                // Act on the new request
                commandToExecute = new operateArm(Robot.oi.operateArmParameters[convertedInputFromLabViewDashBoard][Robot.oi.ARM_PARAMETERS_SHOULDER_INDEX],
                                                  Robot.oi.operateArmParameters[convertedInputFromLabViewDashBoard][Robot.oi.ARM_PARAMETERS_WRIST_INDEX]);
                System.out.println("Create Command");
                commandToExecute.start();
                Robot.oi.lastDashboardButton = convertedInputFromLabViewDashBoard;
                } 
        
        } 
        catch (Exception e) {
        // inputFromLabViewDashBoard = Robot.oi.INITIAL_AND_ERROR_BUTTON;
        System.out.print("Error in lavViewInterface: ");
        System.out.println(e.getMessage());
        }
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    }
}
